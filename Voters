// Experiment 2: Basic voting system smart contract

pragma solidity ^0.8.0;

contract Voting {
    mapping(address => bool) public voters;
    mapping(bytes32 => uint) public votes;
    
    event VoteCast(address indexed voter, bytes32 candidate);
    
    modifier onlyVoters() {
        require(voters[msg.sender], "You are not authorized to vote.");
        _;
    }
    
    constructor(address[] memory _voters) {
        for (uint i = 0; i < _voters.length; i++) {
            voters[_voters[i]] = true;
        }
    }
    
    function vote(bytes32 candidate) public onlyVoters {
        votes[candidate]++;
        emit VoteCast(msg.sender, candidate);
    }
    
    function getVoteCount(bytes32 candidate) public view returns (uint) {
        return votes[candidate];
    }
}
